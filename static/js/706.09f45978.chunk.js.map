{"version":3,"file":"static/js/706.09f45978.chunk.js","mappings":"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","sources":["components/Card.tsx","modules/auth/constants.ts","components/CustomButton.tsx","components/forms/Input.tsx","modules/auth/components/Login/Login.tsx","pages/LoginPage.tsx","styles/style.ts","styles/theme.js"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { CardContainer, CardProps } from \"@src/styles/style\";\r\n\r\nconst Card: React.FC<CardProps> = ({ children, variant=\"default\", isDark, className, height }) => {\r\n  return (\r\n    <CardContainer className={className} $height={height} $variant={variant} $isDark={isDark}>\r\n      {children}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { FormField } from \"../../models/commonModels\";\r\n\r\nexport type LoginFormFields = FormField[];\r\nexport const loginFormFieldArray: LoginFormFields = [\r\n  {\r\n    controlName: \"username\",\r\n    inputName: \"User Name\",\r\n    validation: [\"required\"],\r\n    label: \"Username\",\r\n    classes: {\r\n      containerClasses: \"\"\r\n    },\r\n    attributes: {\r\n      name: \"username\",\r\n      id: \"username\",\r\n      type: \"text\",\r\n      placeholder: \"Enter Username\",\r\n    }\r\n  },\r\n  {\r\n    controlName: \"password\",\r\n    inputName: \"Password\",\r\n    validation: [\"required\"],\r\n    label: \"Password\",\r\n    classes: {\r\n      containerClasses: \"\"\r\n    },\r\n    attributes: {\r\n      name: \"password\",\r\n      id: \"password\",\r\n      type: \"password\",\r\n      placeholder: \"Enter Password\",\r\n    }\r\n  }\r\n];","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { darkTheme, lightTheme } from \"../styles/theme\"; \r\n\r\ntype CustomButtonProps = {\r\n    styles?: React.CSSProperties;\r\n    text: string;\r\n    classes?: {div: string, button: string};\r\n    onCustomButtonClick?: () => void;\r\n    variant: \"primary\" | \"secondary\";\r\n    isDark: boolean\r\n};\r\n\r\nconst StyledButton = styled.button<{$variant: \"primary\" | \"secondary\", $isDark: boolean}>`\r\n        padding: 10px 20px;\r\n        border: none;\r\n        border-radius: 5px;\r\n        cursor: pointer;\r\n        background-color: ${props => props.$isDark ? darkTheme.primaryColor : lightTheme.primaryColor};\r\n        color: ${lightTheme.white} ;\r\n        border: ${props => props.$isDark ? darkTheme.secondaryColor : lightTheme.secondaryColor};\r\n    \r\n        &:hover {\r\n            background-color: ${props => props.$isDark ? darkTheme.primaryColorLight : lightTheme.primaryColorDark};\r\n        }\r\n    `;\r\n\r\nconst CustomButton: React.FC<CustomButtonProps> = ({ text, variant, isDark, classes, onCustomButtonClick }) => {    \r\n  const onClick = () => {\r\n    if (onCustomButtonClick) {\r\n      onCustomButtonClick();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes?.div}>\r\n      <StyledButton onClick={onClick} className={classes?.button} $variant={variant} $isDark={isDark}>{text}</StyledButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  getFormErrors,\r\n  validateEmail,\r\n} from \"../../utils/utils\";\r\nimport { FormErrorTypeEnum, FormValidatorsEnum } from \"../../enums/common\";\r\n\r\ntype InputProps = {\r\n    emitValueToParent: (value:string, controlName:string) => void,\r\n    controlName: string,\r\n    label: string,\r\n    error: string,\r\n    valueIn: string | number,\r\n    emitErrorToParent: (controlName:string, error:string) => void,\r\n    attributes: {\r\n      type: string,\r\n      id: string,\r\n      name: string,\r\n      placeholder: string\r\n    }\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({\r\n  emitValueToParent,\r\n  controlName,\r\n  label,\r\n  error,\r\n  valueIn,\r\n  emitErrorToParent,\r\n  attributes\r\n}) => {\r\n  const [errorMsg, setErrorMessage] = useState(error);\r\n  const [value, setValue] = useState(valueIn);\r\n\r\n  useEffect(() => {\r\n    setErrorMessage(error);\r\n  }, [error]);\r\n\r\n  useEffect(() => {\r\n    setValue(valueIn);\r\n  }, [valueIn]);\r\n\r\n  const onFocusInput = () => {\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n  /**\r\n   * Validate input.\r\n   * Set error state and emit error state to parent component.\r\n   * @returns void\r\n   */\r\n  const validateInput = () => {\r\n    if (!value) {\r\n      const errorText = getFormErrors(FormErrorTypeEnum.REQUIRED, controlName);\r\n      setErrorMessage(errorText);\r\n      return;\r\n    }\r\n    const isValid = validators(attributes.type, value);\r\n    if (!isValid) {\r\n      const errorText = getFormErrors(FormErrorTypeEnum.INVALID, controlName);\r\n      setErrorMessage(errorText);\r\n    } else {\r\n      setErrorMessage(\"\");\r\n    }\r\n    emitErrorToParent(controlName, error);\r\n  };\r\n\r\n  /**\r\n   * Set input state value.\r\n   * Emit value to parent component.\r\n   * @param {*} event\r\n   */\r\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(event.target.value);\r\n    emitValueToParent(event.target.value, controlName);\r\n  };\r\n\r\n  const validators = (type: string, value: string | number) => {\r\n    switch (type) {\r\n    case FormValidatorsEnum.EMAIL:\r\n      return typeof value === \"string\" && validateEmail(value);\r\n    case FormValidatorsEnum.TEXT:\r\n    case FormValidatorsEnum.PASSWORD:\r\n      return value && typeof value === \"string\" && value?.trim()?.length >= 0;\r\n    default:\r\n      break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={attributes.name}>{label}</label>\r\n      <input\r\n        type={attributes.type}\r\n        onFocus={() => onFocusInput()}\r\n        onBlur={() => validateInput()}\r\n        className=\"form-control my-5\"\r\n        id={attributes.id}\r\n        name={attributes.name}\r\n        placeholder={`Enter ${attributes.placeholder}`}\r\n        onChange={(event) => {onInputChange(event);}}\r\n        value={value}\r\n        autoComplete=\"on\"\r\n      />\r\n      <div className=\"error-container\">\r\n        <small className=\"error-text\">\r\n          {errorMsg}\r\n        </small>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { loginFormFieldArray } from \"@src/modules/auth/constants\";\r\nimport { LoginFormControlsAndErrors } from \"@src/modules/auth/authModels\";\r\nimport { CustomButtonVariantEnum, FormErrorTypeEnum } from \"@src/enums/common\";\r\nimport { getFormErrors } from \"@src/utils/utils\";\r\nimport CustomButton from \"@src/components/CustomButton\";\r\nimport Input from \"@src/components/forms/Input\";\r\nimport { loginUser } from \"../../helper\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"@src/store\";\r\n\r\nconst loginFormControlsAndErrors: LoginFormControlsAndErrors = {\r\n  formFields: {\r\n    username: \"\",\r\n    password: \"\"\r\n  },\r\n  formErrors: {\r\n    username: \"\",\r\n    password: \"\"\r\n  }\r\n};\r\n\r\nconst Login = () => {\r\n  const [loginForm, setLoginForm] = useState(loginFormControlsAndErrors);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  /**\r\n   * Set the error state.\r\n   * @param {*} type shares the key name of formErrors object.\r\n   * @param {*} error shares the error message.\r\n   */\r\n  const setControlFieldError = (type:string, error:string) => {\r\n    setLoginForm((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        formErrors: {\r\n          ...prevState.formErrors,\r\n          [type]: error,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Submit the form.\r\n   * Validate the form by looping through all state values.\r\n   * Save user to local storage.\r\n   */\r\n  const onSubmit = ($event: React.FormEvent<HTMLFormElement>) => {\r\n    $event.preventDefault();\r\n    const hasError = validateSubmission();\r\n    if(!hasError){\r\n      dispatch(loginUser(loginForm.formFields));\r\n      setLoginForm((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          formFields: loginFormControlsAndErrors.formFields,\r\n          formErrors: loginFormControlsAndErrors.formErrors\r\n        };});\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Loop through the form values and check if all are filled.\r\n   * Set error required for the unfilled keys.\r\n   * @returns void\r\n   */\r\n  const validateSubmission = () => {\r\n    const formData = loginForm?.formFields;\r\n    let hasError = false;\r\n    Object.keys(formData).forEach((key) => {\r\n      const value = formData[key as keyof typeof loginFormControlsAndErrors.formFields];\r\n      if(!value){\r\n        hasError = true;\r\n        const inputName = getInputName(key);\r\n        setLoginForm((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            formErrors: {\r\n              ...prevState.formErrors,\r\n              [key]: getFormErrors(FormErrorTypeEnum.REQUIRED, inputName)\r\n            }\r\n          };\r\n        });\r\n      }\r\n    });\r\n    return hasError;\r\n  };\r\n\r\n  /**\r\n   * Get input name for display purpose.\r\n   * @param {*} type shares key name of object.\r\n   * @returns \r\n   */\r\n  const getInputName = (type: string) => {\r\n    const formDataItem = loginFormFieldArray?.find((formData) => formData?.controlName === type);\r\n    if(formDataItem){\r\n      return formDataItem?.inputName;\r\n    }\r\n    return \"\";\r\n  };\r\n  \r\n  /**\r\n   * Set value from input to state.\r\n   * @param {*} value shares latest value of input.\r\n   * @param {*} fieldName shares the changed input key name.\r\n   */\r\n  const onInputChange = (value:string, fieldName:string) => {\r\n    setLoginForm((prevState) => ({\r\n      ...prevState,\r\n      formFields: {\r\n        ...prevState.formFields,\r\n        [fieldName]: value,\r\n      },\r\n    }));\r\n  };\r\n  return (\r\n    <form onSubmit={($event) => onSubmit($event)}>\r\n      {loginFormFieldArray.map((formData, index) => {\r\n        return <div key={index} className={`${formData.classes.containerClasses}`}>\r\n          <Input attributes={{...formData.attributes}} controlName={formData.controlName} label={formData.label} valueIn={loginForm.formFields[formData.controlName as keyof typeof loginFormControlsAndErrors.formFields]} error={loginForm.formErrors[formData.controlName as keyof typeof loginFormControlsAndErrors.formErrors]} emitValueToParent={onInputChange} emitErrorToParent={(controlName, error) => setControlFieldError(controlName, error)}/>\r\n        </div>;\r\n      })}\r\n      <CustomButton classes={{div: \"text-center mt-10\", button: \"w-100\"}} text=\"Login\" variant={CustomButtonVariantEnum.PRIMARY} isDark={false}/>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { RootState } from \"@src/store\";\r\nimport Login from \"../modules/auth/components/Login/Login\";\r\nimport Card from \"@src/components/Card\";\r\nimport \"./LoginPage.css\";\r\n\r\nconst LoginPage = () => {\r\n  const navigate = useNavigate();\r\n  const isLoggedIn = useSelector((state: RootState) => state.auth.authSlice.isLoggedIn);\r\n\r\n  useEffect(() => {\r\n    if(isLoggedIn){\r\n      navigate(\"/dashboard\", { replace: true });\r\n    }\r\n  }, [isLoggedIn]);\r\n\r\n  return (<div className={\"container login-container\"}><Card isDark={false} height={280}><Login /></Card></div>);\r\n};\r\n\r\nexport default LoginPage;","import styled, { css, CSSProp } from \"styled-components\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\nimport { HTMLAttributes } from \"react\";\r\n\r\ntype Sizes = {\r\n  [key: string]: number;\r\n};\r\n\r\nconst sizes: Sizes = {\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n\r\ninterface Media {\r\n  [key: string]: (\r\n    literals: TemplateStringsArray,\r\n    ...placeholders: CSSProp[]\r\n  ) => ReturnType<typeof css>;\r\n}\r\n\r\nconst media: Media = Object.keys(sizes).reduce((acc: Media, label: string) => {\r\n  acc[label] = (literals: TemplateStringsArray, ...placeholders: CSSProp[]) => css`\r\n    @media (min-width: ${sizes[label]}px) {\r\n      ${css(literals, ...placeholders)}\r\n    }\r\n  `;\r\n  return acc;\r\n}, {});\r\n\r\n\r\nexport { sizes, media };\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-right: -15px;\r\n  margin-left: -15px;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport type ColType = HTMLAttributes<HTMLDivElement> & {\r\n  sm?: number;\r\n  md?: number;\r\n  lg?: number;\r\n  xl?: number;\r\n};\r\n\r\nexport const Col = styled.div<ColType>`\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  max-width: 100%;\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n\r\n  flex: 0 0 100%;\r\n  max-width: 100%;\r\n\r\n  ${(props) =>\r\n    props.sm &&\r\n    media.sm`\r\n    flex: 0 0 ${props.sm}%;\r\n    max-width: ${props.sm}%;\r\n  `}\r\n  ${(props) =>\r\n    props.md &&\r\n    media.md`\r\n    flex: 0 0 ${props.md}%;\r\n    max-width: ${props.md}%;\r\n  `}\r\n  ${(props) =>\r\n    props.lg &&\r\n    media.lg`\r\n    flex: 0 0 ${props.lg}%;\r\n    max-width: ${props.lg}%;\r\n  `}\r\n  ${(props) =>\r\n    props.xl && media.xl`\r\n    flex: 0 0 ${props.xl}%;\r\n    max-width: ${props.xl}%;\r\n  `}\r\n`;\r\n\r\ntype BoxProps = {\r\n  $width?: 25 | 50 | 75 | 100;\r\n  $height?: 200 | 400 | 600 | 800 | 1000;\r\n};\r\n\r\nexport const Box = styled.div<BoxProps>`\r\n  ${(props) => props.$width && `width: ${props.$width}%;`}\r\n  ${(props) => props.$height && `height: ${props.$height}px;`}\r\n`;\r\n\r\nexport type CardProps = {\r\n    children: React.ReactNode,\r\n    isDark: boolean,\r\n    variant?: \"default\" | \"primary\" | \"secondary\",\r\n    className?: string,\r\n    height?: number,\r\n}\r\n\r\nexport const CardContainer = styled.div<{ $variant: CardProps[\"variant\"], $isDark: boolean, $height?: number}>`\r\n    box-shadow: ${props => props.$isDark ? \"0 4px 8px 0 rgba(255,255,255,0.2)\" : \"0 4px 8px 0 rgba(0,0,0,0.2)\"};\r\n    transition: 0.3s;\r\n    padding: 16px;\r\n    border-radius: 5px;\r\n    background-color: #fff;\r\n    margin: 10px;\r\n    width: 100%;\r\n    ${(props) => props.$height && `min-height: ${props.$height}px;`}\r\n\r\n    ${({$variant}) => variantStyles($variant)}\r\n\r\n    &:hover {\r\n        box-shadow:${props => props.$isDark ? \"0 4px 8px 0 rgba(255,255,255,0.3)\" : \"0 4px 8px 0 rgba(0,0,0,0.3)\"};\r\n    }\r\n\r\n`;\r\n\r\nconst variantStyles = (variant: CardProps[\"variant\"]) => {\r\n  switch (variant) {\r\n  case \"primary\":\r\n    return css`background-color: ${lightTheme.primaryColor}; color: white;`;\r\n  case \"secondary\":\r\n    return css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    background-color: #f5f5f5;\r\n    overflow: hidden;\r\n    color: #333;\r\n\r\n    .product-image {\r\n        width: auto;\r\n        height: 150px !important;\r\n        object-fit: cover;\r\n    }\r\n\r\n    .product-title {\r\n      height: 40px;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 2;\r\n      -webkit-box-orient: vertical;\r\n      line-height: 20px; \r\n      margin-top: 10px;\r\n      font-weight: 600;\r\n    }    \r\n\r\n    .product-price {\r\n        font-size: 14px;\r\n        color: #666;\r\n        margin-bottom: 10px;\r\n        margin-top: 10px;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .action-button {\r\n        background-color: ${lightTheme.primaryColor};\r\n        color: white;\r\n        border: none;\r\n        padding: 10px 20px;\r\n        border-radius: 5px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: darken(${lightTheme.primaryColor}, 10%);\r\n        }\r\n    }\r\n    `;\r\n  default:\r\n    return css``;\r\n  }\r\n};\r\n\r\nexport type ChipsProps = {\r\n  children: React.ReactNode,\r\n  variant: \"primary\"|\"reset\"|\"default\",\r\n  isDark: boolean,\r\n}\r\n\r\nconst variantChipStyles = (variant: ChipsProps[\"variant\"], isDark: boolean) => {\r\n  switch(variant) {\r\n  case \"primary\": \r\n    return css`\r\n    background-color: ${isDark ? darkTheme.secondaryColor : lightTheme.secondaryColor};\r\n    color: ${isDark ? darkTheme.white : lightTheme.white};\r\n  `;\r\n  case \"reset\": \r\n    return css`\r\n      background-color: #f7f7f7;\r\n      color: #333;\r\n      border-radius: none;\r\n    `;\r\n  case \"default\": \r\n    return css`\r\n      background-color: ${isDark ? darkTheme.primaryColor : lightTheme.primaryColor};\r\n      color: ${isDark ? darkTheme.white : lightTheme.white};\r\n    `;\r\n  }\r\n};\r\n\r\nexport const StyledChip = styled.div<{$variant: ChipsProps[\"variant\"], $isDark: boolean}>`\r\n  padding: 4px 10px;\r\n  border-radius: 25px;\r\n  display: inline-block;\r\n  font-size: 0.875rem;\r\n  margin: 5px;\r\n  ${({ $variant, $isDark }) => variantChipStyles($variant || \"default\", $isDark)}\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","// theme.js\r\n\r\nexport const lightTheme = {\r\n  primaryColor: \"#6C63FF\",\r\n  secondaryColor: \"#FFAFCC\",\r\n  secondaryLightColor: \"rgba(255, 200, 221, 0.3)\",\r\n  accentColor: \"#FFD700\",\r\n  backgroundColor: \"#FFFFFF\",\r\n  textColor: \"#333333\",\r\n  primaryColorDark: \"#5b56e0\",\r\n  secondaryColorDark: \"#e69fb9\",\r\n  accentColorDark: \"#e6b800\",\r\n  white: \"#fff\",\r\n  \r\n  inputBorder: \"#ccc\",\r\n  inputHoverBorder: \"#9A8CFF\",\r\n  inputFocusBorder: \"#6C63FF\",\r\n  inputBackground: \"#fff\",\r\n  inputText: \"#333\",\r\n  inputPlaceholder: \"#aaa\",\r\n  inputValid: \"#28a745\",\r\n  inputInvalid: \"#dc3545\",\r\n  inputDisabledBackground: \"#f5f5f5\",\r\n  inputDisabledText: \"#999\",\r\n};\r\n  \r\nexport const darkTheme = {\r\n  primaryColor: \"#9A8CFF\",\r\n  secondaryColor: \"#FFC8DD\",\r\n  secondaryLightColor: \"rgba (255, 175, 204, 0.3)\",\r\n  accentColor: \"#FFEA00\",\r\n  backgroundColor: \"#121212\",\r\n  textColor: \"#E0E0E0\",\r\n  primaryColorLight: \"#a89eff\",\r\n  secondaryColorLight: \"#ffd1e3\",\r\n  accentColorLight: \"#fff200\",\r\n  white: \"#fff\",\r\n\t\r\n  inputBorder: \"#555\",\r\n  inputHoverBorder: \"#9A8CFF\",\r\n  inputFocusBorder: \"#6C63FF\",\r\n  inputBackground: \"#333\",\r\n  inputText: \"#fff\",\r\n  inputPlaceholder: \"#bbb\",\r\n  inputValid: \"#28a745\",\r\n  inputInvalid: \"#dc3545\",\r\n  inputDisabledBackground: \"#444\",\r\n  inputDisabledText: \"#aaa\",\r\n};\r\n  "],"names":["_ref","children","variant","isDark","className","height","_jsx","CardContainer","$height","$variant","$isDark","loginFormFieldArray","controlName","inputName","validation","label","classes","containerClasses","attributes","name","id","type","placeholder","StyledButton","styled","button","_templateObject","_taggedTemplateLiteral","props","darkTheme","primaryColor","lightTheme","white","secondaryColor","primaryColorLight","primaryColorDark","text","onCustomButtonClick","div","onClick","emitValueToParent","error","valueIn","emitErrorToParent","errorMsg","setErrorMessage","useState","value","setValue","useEffect","validators","_value$trim","FormValidatorsEnum","EMAIL","validateEmail","TEXT","PASSWORD","trim","length","_jsxs","htmlFor","onFocus","onBlur","validateInput","errorText","getFormErrors","FormErrorTypeEnum","REQUIRED","INVALID","concat","onChange","event","target","onInputChange","autoComplete","loginFormControlsAndErrors","formFields","username","password","formErrors","Login","loginForm","setLoginForm","dispatch","useDispatch","validateSubmission","formData","hasError","Object","keys","forEach","key","getInputName","prevState","formDataItem","find","fieldName","onSubmit","$event","preventDefault","loginUser","map","index","Input","setControlFieldError","CustomButton","CustomButtonVariantEnum","PRIMARY","LoginPage","navigate","useNavigate","isLoggedIn","useSelector","state","auth","authSlice","replace","Card","sizes","sm","md","lg","xl","media","reduce","acc","literals","_len","arguments","placeholders","Array","_key","css","Row","_templateObject2","Col","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","$width","_templateObject9","variantStyles","_templateObject10","_templateObject11","_templateObject12","StyledChip","_templateObject16","_ref2","variantChipStyles","_templateObject13","_templateObject14","_templateObject15","secondaryLightColor","accentColor","backgroundColor","textColor","secondaryColorDark","accentColorDark","inputBorder","inputHoverBorder","inputFocusBorder","inputBackground","inputText","inputPlaceholder","inputValid","inputInvalid","inputDisabledBackground","inputDisabledText","secondaryColorLight","accentColorLight"],"sourceRoot":""}