{"version":3,"file":"static/js/709.bc70d71f.chunk.js","mappings":"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","sources":["components/Card.tsx","modules/products/components/Product.tsx","modules/products/containers/ProductList.tsx","styles/style.ts"],"sourcesContent":["import React from \"react\";\r\n\r\nimport { CardContainer, CardProps } from \"@src/styles/style\";\r\n\r\nconst Card: React.FC<CardProps> = ({ children, variant=\"default\", isDark, className, height }) => {\r\n  return (\r\n    <CardContainer className={className} $height={height} $variant={variant} $isDark={isDark}>\r\n      {children}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport Card from \"@src/components/Card\";\r\nimport { Product as ProductType } from \"../productsModel\";\r\n\r\nconst Product: React.FC<ProductType> = ({ ...props }) => {\r\n  return (\r\n    <Card isDark={false} height={280} variant=\"secondary\">\r\n      <img className=\"product-image\" src={props.image} alt=\"Product\" />\r\n      <div className=\"product-title\">{props.title}</div>\r\n      <div className=\"product-price\">${props.price}</div>\r\n      <button className=\"action-button\">Add to Cart</button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { fetchCategories, fetchProductsByCategory, fetchProductsList } from \"../helper\";\r\nimport { AppDispatch, RootState } from \"@src/store\";\r\nimport { Product as ProductType } from \"../productsModel\";\r\nimport Product from \"../components/Product\";\r\nimport { Col, Row, StyledChip } from \"@src/styles/style\";\r\n\r\nconst ProductList = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\r\n  const productList: ProductType[] | null = useSelector(\r\n    (state: RootState) => state.products.productsSlice.productsList\r\n  );\r\n  const categories: string[] | null = useSelector(\r\n    (state: RootState) => state.products.productsSlice.categories\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchProductsList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCategories());\r\n  }, []);\r\n\r\n  const getProductsByCategory = (category: string):void => {\r\n    dispatch(fetchProductsByCategory(category));\r\n    setSelectedCategory(category);\t\r\n  };\r\n\r\n  const getAllProducts = ():void => {\r\n    dispatch(fetchProductsList());\r\n    setSelectedCategory(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mw-100 mt-10\">\r\n      <div className=\"flex align-items-center ml-5\">\r\n        <h5>Filter By: </h5>\r\n        {categories && categories.length > 0 && categories.map((cat, index) => (\r\n          <StyledChip key={index} $variant={selectedCategory === cat ? \"primary\" : \"default\"} onClick={() => getProductsByCategory(cat)} $isDark={false}>{cat}</StyledChip>))}\r\n        <StyledChip $variant=\"reset\" $isDark={false} onClick={getAllProducts}>Reset</StyledChip>\r\n      </div>\r\n      {productList && productList?.length > 0 && (\r\n        <Row>\r\n          {productList.map((product) => (\r\n            <Col key={product.id} sm={100} md={50} lg={25} xl={25}>\r\n              <Product {...product} />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n","import styled, { css, CSSProp } from \"styled-components\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\nimport { HTMLAttributes } from \"react\";\r\n\r\ntype Sizes = {\r\n  [key: string]: number;\r\n};\r\n\r\nconst sizes: Sizes = {\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xl: 1200,\r\n};\r\n\r\ninterface Media {\r\n  [key: string]: (\r\n    literals: TemplateStringsArray,\r\n    ...placeholders: CSSProp[]\r\n  ) => ReturnType<typeof css>;\r\n}\r\n\r\nconst media: Media = Object.keys(sizes).reduce((acc: Media, label: string) => {\r\n  acc[label] = (literals: TemplateStringsArray, ...placeholders: CSSProp[]) => css`\r\n    @media (min-width: ${sizes[label]}px) {\r\n      ${css(literals, ...placeholders)}\r\n    }\r\n  `;\r\n  return acc;\r\n}, {});\r\n\r\n\r\nexport { sizes, media };\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-right: -15px;\r\n  margin-left: -15px;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport type ColType = HTMLAttributes<HTMLDivElement> & {\r\n  sm?: number;\r\n  md?: number;\r\n  lg?: number;\r\n  xl?: number;\r\n};\r\n\r\nexport const Col = styled.div<ColType>`\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  max-width: 100%;\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n\r\n  flex: 0 0 100%;\r\n  max-width: 100%;\r\n\r\n  ${(props) =>\r\n    props.sm &&\r\n    media.sm`\r\n    flex: 0 0 ${props.sm}%;\r\n    max-width: ${props.sm}%;\r\n  `}\r\n  ${(props) =>\r\n    props.md &&\r\n    media.md`\r\n    flex: 0 0 ${props.md}%;\r\n    max-width: ${props.md}%;\r\n  `}\r\n  ${(props) =>\r\n    props.lg &&\r\n    media.lg`\r\n    flex: 0 0 ${props.lg}%;\r\n    max-width: ${props.lg}%;\r\n  `}\r\n  ${(props) =>\r\n    props.xl && media.xl`\r\n    flex: 0 0 ${props.xl}%;\r\n    max-width: ${props.xl}%;\r\n  `}\r\n`;\r\n\r\ntype BoxProps = {\r\n  $width?: 25 | 50 | 75 | 100;\r\n  $height?: 200 | 400 | 600 | 800 | 1000;\r\n};\r\n\r\nexport const Box = styled.div<BoxProps>`\r\n  ${(props) => props.$width && `width: ${props.$width}%;`}\r\n  ${(props) => props.$height && `height: ${props.$height}px;`}\r\n`;\r\n\r\nexport type CardProps = {\r\n    children: React.ReactNode,\r\n    isDark: boolean,\r\n    variant?: \"default\" | \"primary\" | \"secondary\",\r\n    className?: string,\r\n    height?: number,\r\n}\r\n\r\nexport const CardContainer = styled.div<{ $variant: CardProps[\"variant\"], $isDark: boolean, $height?: number}>`\r\n    box-shadow: ${props => props.$isDark ? \"0 4px 8px 0 rgba(255,255,255,0.2)\" : \"0 4px 8px 0 rgba(0,0,0,0.2)\"};\r\n    transition: 0.3s;\r\n    padding: 16px;\r\n    border-radius: 5px;\r\n    background-color: #fff;\r\n    margin: 10px;\r\n    width: 100%;\r\n    ${(props) => props.$height && `min-height: ${props.$height}px;`}\r\n\r\n    ${({$variant}) => variantStyles($variant)}\r\n\r\n    &:hover {\r\n        box-shadow:${props => props.$isDark ? \"0 4px 8px 0 rgba(255,255,255,0.3)\" : \"0 4px 8px 0 rgba(0,0,0,0.3)\"};\r\n    }\r\n\r\n`;\r\n\r\nconst variantStyles = (variant: CardProps[\"variant\"]) => {\r\n  switch (variant) {\r\n  case \"primary\":\r\n    return css`background-color: ${lightTheme.primaryColor}; color: white;`;\r\n  case \"secondary\":\r\n    return css`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    background-color: #f5f5f5;\r\n    overflow: hidden;\r\n    color: #333;\r\n\r\n    .product-image {\r\n        width: auto;\r\n        height: 150px !important;\r\n        object-fit: cover;\r\n    }\r\n\r\n    .product-title {\r\n      height: 40px;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 2;\r\n      -webkit-box-orient: vertical;\r\n      line-height: 20px; \r\n      margin-top: 10px;\r\n      font-weight: 600;\r\n    }    \r\n\r\n    .product-price {\r\n        font-size: 14px;\r\n        color: #666;\r\n        margin-bottom: 10px;\r\n        margin-top: 10px;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .action-button {\r\n        background-color: ${lightTheme.primaryColor};\r\n        color: white;\r\n        border: none;\r\n        padding: 10px 20px;\r\n        border-radius: 5px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background-color: darken(${lightTheme.primaryColor}, 10%);\r\n        }\r\n    }\r\n    `;\r\n  default:\r\n    return css``;\r\n  }\r\n};\r\n\r\nexport type ChipsProps = {\r\n  children: React.ReactNode,\r\n  variant: \"primary\"|\"reset\"|\"default\",\r\n  isDark: boolean,\r\n}\r\n\r\nconst variantChipStyles = (variant: ChipsProps[\"variant\"], isDark: boolean) => {\r\n  switch(variant) {\r\n  case \"primary\": \r\n    return css`\r\n    background-color: ${isDark ? darkTheme.secondaryColor : lightTheme.secondaryColor};\r\n    color: ${isDark ? darkTheme.white : lightTheme.white};\r\n  `;\r\n  case \"reset\": \r\n    return css`\r\n      background-color: #f7f7f7;\r\n      color: #333;\r\n      border-radius: none;\r\n    `;\r\n  case \"default\": \r\n    return css`\r\n      background-color: ${isDark ? darkTheme.primaryColor : lightTheme.primaryColor};\r\n      color: ${isDark ? darkTheme.white : lightTheme.white};\r\n    `;\r\n  }\r\n};\r\n\r\nexport const StyledChip = styled.div<{$variant: ChipsProps[\"variant\"], $isDark: boolean}>`\r\n  padding: 4px 10px;\r\n  border-radius: 25px;\r\n  display: inline-block;\r\n  font-size: 0.875rem;\r\n  margin: 5px;\r\n  ${({ $variant, $isDark }) => variantChipStyles($variant || \"default\", $isDark)}\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n"],"names":["_ref","children","variant","isDark","className","height","_jsx","CardContainer","$height","$variant","$isDark","props","_jsxs","Card","src","image","alt","title","price","ProductList","dispatch","useDispatch","selectedCategory","setSelectedCategory","useState","productList","useSelector","state","products","productsSlice","productsList","categories","useEffect","fetchProductsList","fetchCategories","length","map","cat","index","StyledChip","onClick","getProductsByCategory","category","fetchProductsByCategory","getAllProducts","Row","product","Col","sm","md","lg","xl","Product","id","sizes","media","Object","keys","reduce","acc","label","literals","_len","arguments","placeholders","Array","_key","css","_templateObject","_taggedTemplateLiteral","styled","div","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","$width","concat","_templateObject9","variantStyles","_templateObject10","lightTheme","primaryColor","_templateObject11","_templateObject12","_templateObject16","_ref2","variantChipStyles","_templateObject13","darkTheme","secondaryColor","white","_templateObject14","_templateObject15"],"sourceRoot":""}